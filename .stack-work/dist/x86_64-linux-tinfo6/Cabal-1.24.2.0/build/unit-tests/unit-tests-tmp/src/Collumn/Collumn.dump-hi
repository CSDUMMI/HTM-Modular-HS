
==================== FINAL INTERFACE ====================
2018-10-24 15:07:10.01181248 UTC

interface main@main:Collumn 8002
  interface hash: 0dfba3b99dc5dbceb4e3011ae962cfeb
  ABI hash: 3d863ffc0dd29f11691e4eb2c00b8bc5
  export-list hash: db7704bcbd441d7be19566900a467554
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1678819b7ddeb6ac62ae09d0ce0c2135
  sig of: Nothing
  used TH splices: False
  where
exports:
  Collumn.pushLayer
  Collumn.Collumn
  Collumn.Layer
  Collumn.LayerData
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
a9b5c2f0fdd728f0abd701281c210e70
  $fShowLayer :: GHC.Show.Show Collumn.Layer
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Collumn.Layer
                  Collumn.$fShowLayer_$cshowsPrec
                  Collumn.$fShowLayer_$cshow
                  Collumn.$fShowLayer_$cshowList -}
a9b5c2f0fdd728f0abd701281c210e70
  $fShowLayer1 ::
    Collumn.Layer -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ (x :: Collumn.Layer)
                   (s :: GHC.Base.String)[OneShot] ->
                 case x of wild { Collumn.Layer ds ds1 ->
                 case ds1 of wild1 { Collumn.LayerData b1 ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (GHC.Base.++
                      @ GHC.Types.Char
                      Collumn.$fShowLayer2
                      (GHC.Show.showList__
                         @ [GHC.Types.Double]
                         GHC.Float.$fShowDouble_$cshowList
                         b1
                         (GHC.Types.[] @ GHC.Types.Char)))
                   s } }) -}
c9197d34beb8fb02fa85865160406dfa
  $fShowLayer2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LayerData "#) -}
976d5d52d8c69e469b326f77195ef1c6
  $fShowLayerData :: GHC.Show.Show Collumn.LayerData
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Collumn.LayerData
                  Collumn.$fShowLayerData_$cshowsPrec
                  Collumn.$fShowLayer_$cshow1
                  Collumn.$fShowLayerData_$cshowList -}
976d5d52d8c69e469b326f77195ef1c6
  $fShowLayerData1 :: Collumn.LayerData -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Collumn.LayerData) (w1 :: GHC.Base.String) ->
                 case w of ww { Collumn.LayerData ww1 ->
                 Collumn.$w$cshowsPrec1 0# ww1 w1 }) -}
976d5d52d8c69e469b326f77195ef1c6
  $fShowLayerData_$cshowList :: [Collumn.LayerData] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Collumn.LayerData
                   Collumn.$fShowLayerData1) -}
976d5d52d8c69e469b326f77195ef1c6
  $fShowLayerData_$cshowsPrec ::
    GHC.Types.Int -> Collumn.LayerData -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Collumn.LayerData)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Collumn.LayerData ww3 ->
                 Collumn.$w$cshowsPrec1 ww1 ww3 w2 } }) -}
a9b5c2f0fdd728f0abd701281c210e70
  $fShowLayer_$cshow :: Collumn.Layer -> GHC.Base.String
  {- Arity: 1, Strictness: <S(LS),1*U(A,1*U(1*U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Collumn.Layer) ->
                 case ds of wild { Collumn.Layer ds1 ds2 ->
                 Collumn.$fShowLayer_$cshow1 ds2 }) -}
976d5d52d8c69e469b326f77195ef1c6
  $fShowLayer_$cshow1 :: Collumn.LayerData -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Collumn.LayerData) ->
                 case x of wild { Collumn.LayerData b1 ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Collumn.$fShowLayer2)
                   (GHC.Show.showList__
                      @ [GHC.Types.Double]
                      GHC.Float.$fShowDouble_$cshowList
                      b1
                      (GHC.Types.[] @ GHC.Types.Char)) }) -}
a9b5c2f0fdd728f0abd701281c210e70
  $fShowLayer_$cshowList :: [Collumn.Layer] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (ls :: [Collumn.Layer]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Collumn.Layer Collumn.$fShowLayer1 ls s) -}
a9b5c2f0fdd728f0abd701281c210e70
  $fShowLayer_$cshowsPrec ::
    GHC.Types.Int -> Collumn.Layer -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S(LS),1*U(A,1*U(1*U))><L,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Collumn.Layer)
                   (w2 :: GHC.Base.String) ->
                 case w1 of ww { Collumn.Layer ww1 ww2 ->
                 case ww2 of ww3 { Collumn.LayerData ww4 ->
                 Collumn.$w$cshowsPrec ww4 w2 } }) -}
7e75dd31d08a8db52b72054835c3e770
  $tc'Collumn :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13709064541775212197##
                   10026348204406603227##
                   Collumn.$trModule
                   Collumn.$tc'Collumn1) -}
de53ddb0081b4ae02fd080e99d4de0dd
  $tc'Collumn1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Collumn"#) -}
164bb8dd0df1c3bf8ed485727f44015b
  $tc'Layer :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14601544466765805988##
                   9215730179469746994##
                   Collumn.$trModule
                   Collumn.$tc'Layer1) -}
9ce52f49cb92ae7d1c15ac8d0e2382a0
  $tc'Layer1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Layer"#) -}
47bd63bd2d7e403e62d44b17cff42ece
  $tc'LayerData :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1140003274684277365##
                   5825153320640574546##
                   Collumn.$trModule
                   Collumn.$tc'LayerData1) -}
bb81c3c3a1e1e48878a24127172e1668
  $tc'LayerData1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'LayerData"#) -}
cf1f3739714737627606dd9729b55613
  $tcCollumn :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15823418491320197696##
                   4084432541103158704##
                   Collumn.$trModule
                   Collumn.$trModule1) -}
a47a4cf0b06686ee39a76ac04118fbd2
  $tcLayer :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4978817876108356741##
                   9387639518006794037##
                   Collumn.$trModule
                   Collumn.$tcLayer1) -}
e3e99fbadddf1a02b791270caa0c1062
  $tcLayer1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Layer"#) -}
73ab181dd8d5e19d874801a07df0397c
  $tcLayerData :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11631280980967620242##
                   1710444604202204468##
                   Collumn.$trModule
                   Collumn.$tcLayerData1) -}
9afaee6992a71c2c66b7c8d56c71c9cf
  $tcLayerData1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "LayerData"#) -}
cfc012b78a4d89b3f3fd01c499a511d3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Collumn.$trModule2
                   Collumn.$trModule1) -}
ccae2d87a387ac1b567522aa43837469
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Collumn"#) -}
ce698c77e296f6e76f9999aebeaffbec
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
fb2b0e72849610e7b7f930527925c266
  $w$cshowsPrec ::
    [[GHC.Types.Double]] -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: [[GHC.Types.Double]])
                   (w :: GHC.Base.String) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (GHC.Base.++
                      @ GHC.Types.Char
                      Collumn.$fShowLayer2
                      (GHC.Show.showList__
                         @ [GHC.Types.Double]
                         GHC.Float.$fShowDouble_$cshowList
                         ww
                         (GHC.Types.[] @ GHC.Types.Char)))
                   w) -}
b51e601fe57c451253e3b316b7495fe8
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> [[GHC.Types.Double]] -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: [[GHC.Types.Double]])
                   (w :: GHC.Base.String) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Collumn.$fShowLayer2
                        (GHC.Show.showList__
                           @ [GHC.Types.Double]
                           GHC.Float.$fShowDouble_$cshowList
                           ww1
                           w)
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Collumn.$fShowLayer2
                           (GHC.Show.showList__
                              @ [GHC.Types.Double]
                              GHC.Float.$fShowDouble_$cshowList
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w))) }) -}
a9b5c2f0fdd728f0abd701281c210e70
  data Collumn
    = Collumn {layers :: [Collumn.Layer], layer_num :: GHC.Types.Int}
    RecFlag: Recursive
a9b5c2f0fdd728f0abd701281c210e70
  data Layer
    = Layer {activationFunction :: Collumn.Collumn
                                   -> Collumn.LayerData -> GHC.Types.Int -> Collumn.Collumn,
             layer_data :: Collumn.LayerData}
976d5d52d8c69e469b326f77195ef1c6
  data LayerData = LayerData [[GHC.Types.Double]]
c94e93c5a2c36fe6c14b781fe51a8678
  activationFunction ::
    Collumn.Layer
    -> Collumn.Collumn
    -> Collumn.LayerData
    -> GHC.Types.Int
    -> Collumn.Collumn
  RecSel Left Collumn.Layer
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Collumn.Layer) ->
                 case ds of wild { Collumn.Layer ds1 ds2 -> ds1 }) -}
952389674aac9a30ae58c9a6e6c4b755
  layer_data :: Collumn.Layer -> Collumn.LayerData
  RecSel Left Collumn.Layer
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Collumn.Layer) ->
                 case ds of wild { Collumn.Layer ds1 ds2 -> ds2 }) -}
422252734de2a1737a1ecbc5885c8858
  layer_num :: Collumn.Collumn -> GHC.Types.Int
  RecSel Left Collumn.Collumn
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Collumn.Collumn) ->
                 case ds of wild { Collumn.Collumn ds1 ds2 -> ds2 }) -}
827eb813938dc2f16e0a16107d93b11c
  layers :: Collumn.Collumn -> [Collumn.Layer]
  RecSel Left Collumn.Collumn
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Collumn.Collumn) ->
                 case ds of wild { Collumn.Collumn ds1 ds2 -> ds1 }) -}
c9d4f2a06a6efee4254cb247b43f8adf
  pushLayer :: Collumn.Collumn -> Collumn.Layer -> Collumn.Collumn
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(1*U,U)><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Collumn.Collumn) (new_layer :: Collumn.Layer) ->
                 case ds of wild { Collumn.Collumn ds1 ds2 ->
                 Collumn.Collumn
                   (GHC.Base.augment
                      @ Collumn.Layer
                      (\ @ b (c :: Collumn.Layer -> b -> b)[OneShot] (n :: b)[OneShot] ->
                       GHC.Base.foldr @ Collumn.Layer @ b c n ds1)
                      (GHC.Types.:
                         @ Collumn.Layer
                         new_layer
                         (GHC.Types.[] @ Collumn.Layer)))
                   ds2 }) -}
instance [safe] GHC.Show.Show [Collumn.Layer] = Collumn.$fShowLayer
instance [safe] GHC.Show.Show [Collumn.LayerData]
  = Collumn.$fShowLayerData
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

